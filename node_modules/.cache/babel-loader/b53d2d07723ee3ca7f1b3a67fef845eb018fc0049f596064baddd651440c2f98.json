{"ast":null,"code":"var _jsxFileName = \"/home/kamau/Downloads/my projects/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\nimport { TileList } from \"../../components/tileList/TileList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContactsPage = () => {\n  _s();\n  const [contacts, setContacts] = useState([]);\n  const [name, setName] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [isDuplicate, setIsDuplicate] = useState(false);\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    isDuplicate = contacts.find(contact => contact.name === name);\n    if (isDuplicate) {\n      setIsDuplicate(true);\n      alert(\"Contact already exists\");\n    } else {\n      setIsDuplicate(false);\n      setContacts(prev => [...prev, {\n        name,\n        phone,\n        email\n      }]);\n      setName(\"\");\n      setPhone(\"\");\n      setEmail(\"\");\n    }\n\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\n  };\n\n  useEffect(() => {\n    set;\n  }, [isDuplicate]);\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add Contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(ContactsPage, \"nkOLP4dxJaFOlUxa+KtG2OycCho=\");\n_c = ContactsPage;\nvar _c;\n$RefreshReg$(_c, \"ContactsPage\");","map":{"version":3,"names":["React","useState","useEffect","ContactForm","TileList","jsxDEV","_jsxDEV","ContactsPage","_s","contacts","setContacts","name","setName","phone","setPhone","email","setEmail","isDuplicate","setIsDuplicate","handleSubmit","e","preventDefault","find","contact","alert","prev","set","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/kamau/Downloads/my projects/appointment-planner-starting-v18/src/containers/contactsPage/ContactsPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { ContactForm } from \"../../components/contactForm/ContactForm\";\r\nimport { TileList } from \"../../components/tileList/TileList\";\r\n\r\nexport const ContactsPage = () => {\r\n  const [contacts, setContacts] = useState([]);\r\n  const [name, setName] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [isDuplicate, setIsDuplicate] = useState(false);\r\n  /*\r\n  Define state variables for \r\n  contact info and duplicate check\r\n  */\r\n\r\n \r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n   isDuplicate = contacts.find((contact) => contact.name === name);\r\n    if(isDuplicate){\r\n      setIsDuplicate(true)\r\n      alert(\"Contact already exists\");\r\n    }\r\n      else{ setIsDuplicate(false)\r\n        setContacts(prev => [...prev, {name, phone, email}]);\r\n        setName(\"\");\r\n        setPhone(\"\");\r\n        setEmail(\"\");\r\n       }\r\n\r\n    /*\r\n    Add contact info and clear data\r\n    if the contact name is not a duplicate\r\n    */\r\n  };\r\n     useEffect(() => { \r\n       set\r\n     }, [isDuplicate]);\r\n  /*\r\n  Using hooks, check for contact name in the \r\n  contacts array variable in props\r\n  */\r\n\r\n  return (\r\n    <div>\r\n      <section>\r\n        <h2>Add Contact</h2> \r\n      </section>\r\n      <hr />\r\n      <section>\r\n        <h2>Contacts</h2>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAElD,SAASC,WAAW,QAAQ,0CAA0C;AACtE,SAASC,QAAQ,QAAQ,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EACrD;AACF;AACA;AACA;;EAIE,MAAMkB,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,EAAE;IAEnBJ,WAAW,GAAGR,QAAQ,CAACa,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACZ,IAAI,KAAKA,IAAI,CAAC;IAC9D,IAAGM,WAAW,EAAC;MACbC,cAAc,CAAC,IAAI,CAAC;MACpBM,KAAK,CAAC,wBAAwB,CAAC;IACjC,CAAC,MACK;MAAEN,cAAc,CAAC,KAAK,CAAC;MACzBR,WAAW,CAACe,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAE;QAACd,IAAI;QAAEE,KAAK;QAAEE;MAAK,CAAC,CAAC,CAAC;MACpDH,OAAO,CAAC,EAAE,CAAC;MACXE,QAAQ,CAAC,EAAE,CAAC;MACZE,QAAQ,CAAC,EAAE,CAAC;IACb;;IAEH;AACJ;AACA;AACA;EACE,CAAC;;EACEd,SAAS,CAAC,MAAM;IACdwB,GAAG;EACL,CAAC,EAAE,CAACT,WAAW,CAAC,CAAC;EACpB;AACF;AACA;AACA;;EAEE,oBACEX,OAAA;IAAAqB,QAAA,gBACErB,OAAA;MAAAqB,QAAA,eACErB,OAAA;QAAAqB,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAK;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACZ,eACVzB,OAAA;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAM,eACNzB,OAAA;MAAAqB,QAAA,eACErB,OAAA;QAAAqB,QAAA,EAAI;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAK;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACT;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACN;AAEV,CAAC;AAACvB,EAAA,CApDWD,YAAY;AAAAyB,EAAA,GAAZzB,YAAY;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}